The difference between the scripting and automating:
scripting                                                         programing
*write to automate the particular task                      *one program can do many tasks
*do not require the compiling,it is interpreter             *must compile to execute

========================================================================================

bash stands --> born again shell --> bash is advanced version of shell


"#!/bin/bash"  -->#!/bin/bash  is used to define the which shell we are using to execute the commands

In Bash scripting indentation will not matter,better keep indentation like python to understand other well

*cat /etc/shells  --> check how many shells are available in your system

*cat /etc/*release*  --> check os and their version

*creating shell sctipt file with .sh is best practice(without .sh will also work) and after creating change into executable mode
Run --> chmod 755 your_script_name.sh

*execute it using ./your_script_name.sh 

*for comment in shell script use # this is comment

*for commenting the multiple line commands using below approach

: '
command1
command2
command3
command4
'

The commands will not execute in bash script
command1
command2
command3
command4

==========================================================================================

Execute the multiple script in single script:

1) Using the source command

source 2.quotes.sh
source 3.variables.sh
source 4.specialvariables.sh

2) Using subsheell approach

bash -c "source 2.quotes.sh"
bash -c "source 3.variables.sh"
bash -c "source 4.specialvariables.sh"

==========================================================================================
Here  document in bash script:
Here doc are used to give the info to the user,which have more number of lines,we can't echo the each line.
we can use the Here doc to print the entire info

<<info
variable scope
if we use local key word while definig variable,that variable is only accessable with that function or block.
declaring the variable without local key word is called global variable,you can use that variable in any where in the script
info

==========================================================================================
IFS --> Internal field seperator

In bash,there is some built-in variables are available,one it is IFS
By default it is set to space

we can use this value assgined to IFS as a field seperator for commands

ex:

group_details=`cat /etc/group | grep nraghu`

IFS=:
set $group_details
echo "username=$1 \
     password=$2  \
     group_id=$3"  

==========================================================================================
multi-line commands --> we can write the single long commands as in multiple line using line continuation characters or
                        by enclosing the command in parentheses.
                        i always go with line contunuation method because same method will work for dockerfile

systax:

command arg1 \
        arg2 \
        arg3 

Ex:
  echo "Today is $(date \
  +%A)"
 
  echo "Hi I am Raghu " \
       "I am from Malavalli "\
       "My father name is Nagendra "

=========================================================================================
Access the varibale value and array value in Bash scripting:

#variable
Name="Raghu M N"
age=34

echo "My name is $Name and my age is $age"

#Arrays
1) Indexed array --> Elements inside the array is space seperated 

months=("Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec")

echo "The my birthday date is 13-${months[6]}-1999"
echo "The entire content of array is ${months[@]}"
echo "The number of elements in array is ${#months[@]}"

2)Assosiated array also called as Hash table,dictonary

declare -A my_details

my_details["name"]="Raghu M N"
my_details["age"]=24
my_details["Town"]="Malavalli"
my_details["Degree_colllege"]="MSRIT"


echo "The entire content of array is ${my_details[@]}"
echo "The numbers of elements in array is ${#my_details[@]}"
echo "The key in arrya is ${!my_details[@]}"


=========================================================================================

Debugging the shell script.

*use set -x command in script to run the script in debug mode.it will print each command in script and 
respective output for debugging purpose

*if writen the script in windows docs or other format file,then copy and paste it into .sh file will not work,
it looks fine without any syntax error because ASII value of windows and unix will diffent that why it will give error.
use the https://www.shellcheck.net/ website to check this type of issues

*use the any IDE or editor which support the bash script format ex: notepad ++ 

=========================================================================================

The usage of >&2 in bash scripting

The >&2 part in "-$OPTARG" >&2 is used to redirect the error output to standard error (file descriptor 2) 
instead of the regular standard output (file descriptor 1). 
It is a way to display error messages on the terminal or log them separately from regular output.

=========================================================================================

*there are two types of variables in any system
       i)system varibales (The variables all letters in capital are system variable generally but user also can define with capital letter)
         use command "env" or "printenv" to check the system varibales
         example --> PATH
       ii)user defined variables in terminal
          export name="Raghu"
          export NAME="Ravi" 
          this is user defined variables

variables must be starts with only letters,variables are case sensitive(name and Name both are different varibles).
defining variable in script:
Name=Raghu
Age=24

=========================================================================================

The special variables in bash
$*  --> it stores the complete set of positional parameters as single string
$#  --> it set to number of arguments specified
$0  --> The filename of the current script
$1  --> stoes the first argument passed after file name
"$@" --> each quoted string treated as a seperate argument
$?  --> exit status of last command
$$  --> process id of current script
$!  --> process id of the last background job

=========================================================================================

*if,elif and else condition operators and format

     if [condition];then
        statement 1
     elif [condition];then
        statement
     else
        statement
     fi
=========================================================================================

Relatinal operators:

  Interger comparition --> i always go with below letters approach for comparition

       * -eq  --> equal to                                if [ $a -eq $b ]
       * -ne  --> not equal                               if [ $a -ne $b ]
       * -gt  --> greater than                            if [ $a -gt $b ]
       * -ge  --> greater than or equal                   if [ $a -ge $b ]
       * -lt  --> less than                               if [ $a -lt $b ]
       * -le  --> less than or equal                      if [ $a -le $b ]
  
  String comparition
       * = or == --> equal to   if [ "$a" == "$b" ] or if [ "$a" = "$b" ] both are same
       * !=      --> not equal  if [ "$a" != "$b" ] 
       * -z --> string is null,has zero length if [ -z "$a" ]

=========================================================================================
Logical operators: To write multiple conditions,validate mutiple conditions and execute the statement

In logical operatos,i always go with letters approach to with one approach

AND  --> -a or &&               OR   --> -o or ||                  NOT  --> -n or ! 

[ 1 -a 1 ] --> 1                  [ 1 -o 1 ] --> 1                -n [ 0 ]  --> 1 
[ 1 -a 0 ] --> 0                  [ 1 -o 0 ] --> 1                -n [ 1 ]  --> 0
[ 0 -a 1 ] --> 0                  [ 0 -o 1 ] --> 1
[ 0 -a 0 ] --> 0                  [ 0 -o 0 ] --> 0      

Example:i am using leters
                   
[ 5 -gt 6 -a  8 -lt 10 ]  --> 0 any one value is false Result is false

[ 3 -lt 5 -o 6 -gt 5 ]   --> 1  any one value is true Result is True

-n [ 5 -gt 4 ]   --> 0 
       

=========================================================================================

if, elif , else conditional statements

syntax:

                if [ condition1 ];then
                ...
                ...
                elif [ condition2 ];then
                ...
                ...
                elif [ condition3 ];then
                ...
                ...
                else
                ...
                ...
                fi

nested if:

if [ condition1 ];then
   if [ condition2 ];then 
   .....
   .....
   elif [ condition3 ];then
   ....
   ....
   else
   ....
   ....
   fi
else
....
....
fi

=========================================================================================

while loop --> check the condition and execute the block of code if the condition is true, 
it continues untill the condition become false

syntax:

while [ condition ]
do
...
...
...
done

=========================================================================================

for loop  --> itirate over the any data type(list,numbers,string) and fetch the values

syntax:

for <variable> in <values to variables>
do
<execution commands>
done

=========================================================================================

case statement --> it is used to do condition branching based on value of variable and execute the that block of case

syntax:

case value in
pattern1)
# commands to execute if value matches to pattern1
;;
pattern2)
# commands to execute if the value matches to pattern2
;;
pattern3)
# commands to execute if the value matches to pattern3
;;
*)
esac

=========================================================================================

continue statement

In bash scripting,continue statement is used to skip the rest of current iteration based on condition 
and move on to next iteration

it is commonly used within the loops like for loop and while loop

=========================================================================================

set command in bash script

In bash scripting,set command is used to set values to postional arguments and change the values of shell options,
also used unseting the value to  variables

shell options:
 
set -e  --> Exit on error mode, Exit immidiately if any command fail , always use "set -e" in script to exit if single command fail
set +e  --> Don't exit even commands fail

set -x --> xtrace option --> enable the debugging mode,print the command with additionally expands variables and arguments before, give more info for de
set +x --> disable the debugging mode

set -v  --> verbose option --> print each command as they written in script,if you want see the exactly  written script
set +v  --> disable command echoing

set -u  --> nounset option  --> strict mode --> treat the refering an undefined variable as error

=========================================================================================

shift command  --> whenever you execute the shift commmand in script, it will shift the right postional argument to left postional argument and left positinal argument will get deleted

Ex:

see the 19.shift_postional_parameters.sh file

=========================================================================================

function  --> In bash scripting,function allow you to group a set of commands and execute them as single unit.
              function accecpt the arguments,perform the task and return the value if needed
              In Bash scripting, the return value is assigned to the $? variable. 

syntax:

function_name(){
   #Function body(commands to execute)
}

function_name   --> calling the function

or

function function_name(){
   #Function body(commands to execute)
}

function_name   --> calling the function

Both the sytax is valid, we can any of it. i always go with the first syntax

=============================================================================================

basename command in bash script is used to retrieve the last file/directory name of given path

syntax:

basename path_to_file or directory

Ex:

basename /home/nraghu/ravi.txt --> the output of this command is ravi.txt 

basename /home/nraghu  --> the output of this command is nraghu  

=============================================================================================

until loop --> The main difference between while loop and until loop is,until loop execute its code when the condtion is false(exit status 1).

syntax:

until [ condition ]
do
#commands to execute until the condition becomes true 
done

=============================================================================================

getopts  

In Bash scripting, getopts is a built-in command that allows you to parse command-line options and arguments easily.
It is particularly useful when you want to create scripts that accept various options and parameters from the user. 
getopts works well for simple option handling, but for more complex cases, 
you might want to consider using external libraries like getopt.

getopts will iterate over the arguments passed into script after the script name and get read of the value if that option have value.
getopts will validate the passed arguments with options mentioned in optionstring.

every letter in string will represents the one option, if the letter starts with : that option don't have vaule.

Syntax:

getopts 'letters:letters' variable  -->  it will iterate over the all passed aguments and check is that option mentioned in options evenif it is not exits,give error.

Example:

vaild_options='ah:u'
while getopts $valid_options opt
do
  case "$opt" in
    a)
      # passed value is $OPTARG
      ;;
    h)
      # passed value is $OPTARG
      ;;
    u)
      # passed the option u 
      ;;
    \?)
      # passed value is $OPTARG
      ;;
  esac
done

In above syntax variable $valid_options is used to store the available options of script,will be mentined from user and get value passed to it using OPTAwill pass give the value and VARIABLE is simple one varibale

ex:   OPTIONSTING --->  "ah:u"  user need to pass options like -a Raghu -h M -u
      the value will store in $OPTARG variable

=============================================================================================
eval command in bash scripting:

<<info
In bash scripting, the eval command is used to execute the string as command.
syntax --> eval "command"

write the command within double quotes,it will consider as string, execute that as command using eval built-in function
info

Ex:

eval "ls -lah /etc | grep hosts"

name="Raghu"
eval "echo Hello $name"

eval "ls -la | grep .txt"

=============================================================================================

logger command:

The logger command allows you to log messages with different priorities (e.g., info, warning, error) to the system log, 
which can be helpful for monitoring script activities and debugging.

logger "message" options

-h, --help: Display help information and exit.
-d, --udp: Use UDP to send messages to the syslog server.
-i, --id: Log the process ID with each message.
-p <priority>, --priority <priority>: Specify the log priority or facility level for the message. The priority can be a single character (e.g., i for info, w for warning, err for error). Alternatively, you can use facility levels like user, daemon, auth, etc.
-t <tag>, --tag <tag>: Add a tag to the log entry, which can help identify the source of the log message.
-u, --socket <socket>: Log the message to the specified socket.
-s, --stderr: Send the log message to standard error (stderr) instead of the system log.
-f <file>, --file <file>: Read the message from the specified file. This allows you to log multi-line messages.
-r <remote_host>, --server <remote_host>: Send the message to a remote syslog server at <remote_host>.
-n, --server-name: Append the local hostname to the remote syslog server.
-k, --tcp: Use TCP to send messages to the syslog server.
-S, --rfc3164: Use the old syslog protocol (RFC 3164) instead of the default RFC 5424.
-T, --rfc5424: Use the newer syslog protocol (RFC 5424) for log messages (default).
-P <processname>, --program <processname>: Specify the name of the program or process logging the message.
-m <message_file>, --msgfile <message_file>: Read the log message from the specified file. Equivalent to -f.
-V, --version: Display version information and exit.


Ex:

logger "The IFS script executed succussfully" -t IFS.sh -i -f $CWD/logs.txt 
